# handlers.py
import re
import asyncio
import pytz
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from utils import extract_event_info
from state import state

logger = logging.getLogger(__name__)


def get_main_keyboard():
    keyboard = [
        [InlineKeyboardButton("–°—Ç–æ–ø", callback_data="stop_tracking")]
    ]
    return InlineKeyboardMarkup(keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ datetime
def ensure_datetime(value):
    if isinstance(value, str):
        try:
            return datetime.strptime(value, "%H:%M")  # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ datetime
        except ValueError:
            return None  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –≤–µ—Ä–Ω–µ–º None
    elif isinstance(value, datetime):
        return value  # –ï—Å–ª–∏ —É–∂–µ datetime, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    return None  # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Å—Ç—Ä–æ–∫–∞ –∏ –Ω–µ datetime, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

async def update_global_message(group_id: int, group_title: str, context: CallbackContext,
                                view_mode: str = "grouped") -> None:
    if not state.admin_chat_id:
        return
    if view_mode == "grouped":
        lines = [f"–ì—Ä—É–ø–ø–∞: {group_title}"]
        overall_total_seconds = 0
        overall_count = 0
        topics = {}

        unique_phones_today = set()
        standing_now = 0

        for (g_id, topic_id, phone), rec in state.stats.items():
            if g_id == group_id:
                topics.setdefault(topic_id, []).append((phone, rec))
                unique_phones_today.add(phone)
                if rec.get("started") and not rec.get("stopped"):
                    standing_now += 1

        for tid in sorted(topics.keys()):
            lines.append(f"\nTopic id: {tid}")
            topic_lines = []
            topic_total_seconds = 0
            topic_count = 0

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ 'started' –≤ datetime –ø–µ—Ä–µ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
            sorted_entries = sorted(topics[tid], key=lambda item: ensure_datetime(item[1].get("started")))

            for phone, rec in sorted_entries:
                topic_lines.append(format_record(rec, phone))
                if rec.get("downtime"):
                    topic_total_seconds += rec["downtime"].total_seconds()
                    topic_count += 1
            lines.extend(topic_lines)
            if topic_count:
                avg_seconds = topic_total_seconds / topic_count
                avg_hours = int(avg_seconds // 3600)
                avg_minutes = int((avg_seconds % 3600) // 60)
                total_avg_minutes = avg_hours * 60 + avg_minutes
                marker = ""
                if total_avg_minutes < 20:
                    marker = " üî¥"
                elif total_avg_minutes < 30:
                    marker = " üü†"
                lines.append(f"–°—Ä–µ–¥–Ω–µ–µ –ø–æ –ø–∫ - {avg_hours}:{avg_minutes:02d}{marker}")
            else:
                lines.append("–°—Ä–µ–¥–Ω–µ–µ –ø–æ –ø–∫ - 0:00")

        lines.append(f"\n\n–ü–æ—Å—Ç–∞–≤–∏–ª–∏: {len(unique_phones_today)}")
        lines.append(f"–°—Ç–æ—è—Ç —Å–µ–π—á–∞—Å: {standing_now}")

        final_message = "\n".join(lines)
        keyboard = get_daily_stats_keyboard(group_id)

    elif view_mode == "daily":
        lines = [f"–ì—Ä—É–ø–ø–∞: {group_title}"]
        total_seconds = 0
        count = 0
        unique_phones_today = set()
        standing_now = 0

        daily_records = [
            (phone, rec)
            for (g_id, _, phone), rec in state.stats.items()
            if g_id == group_id
        ]

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ 'started', –ø—Ä–µ–æ–±—Ä–∞–∑—É—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ datetime
        daily_sorted = sorted(daily_records, key=lambda item: ensure_datetime(item[1].get("started")))

        for phone, rec in daily_sorted:
            lines.append(format_record(rec, phone))
            if rec.get("downtime"):
                total_seconds += rec["downtime"].total_seconds()
                count += 1
            unique_phones_today.add(phone)
            if rec.get("started") and not rec.get("stopped"):
                standing_now += 1

        if count:
            avg_seconds = total_seconds / count
            avg_hours = int(avg_seconds // 3600)
            avg_minutes = int((avg_seconds % 3600) // 60)
        else:
            avg_hours, avg_minutes = 0, 0

        lines.append(f"–°—Ä–µ–¥–Ω–µ–µ –ø–æ –≥—Ä—É–ø–ø–µ: {avg_hours}:{avg_minutes:02d}")
        lines.append(f"\n–ü–æ—Å—Ç–∞–≤–∏–ª–∏: {len(unique_phones_today)}")
        lines.append(f"–°—Ç–æ—è—Ç —Å–µ–π—á–∞—Å: {standing_now}")

        final_message = "\n".join(lines)
        keyboard = get_group_stats_keyboard(group_id)

    else:
        return

    try:
        if group_id in state.global_message_ids:
            await context.bot.edit_message_text(
                chat_id=state.admin_chat_id,
                message_id=state.global_message_ids[group_id],
                text=final_message,
                reply_markup=keyboard
            )
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")
        else:
            sent_msg = await context.bot.send_message(
                chat_id=state.admin_chat_id,
                text=final_message,
                reply_markup=keyboard
            )
            state.global_message_ids[group_id] = sent_msg.message_id
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id} —Å id {sent_msg.message_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}: {e}")



async def message_handler(update: Update, context: CallbackContext) -> None:
    if not state.tracking_active:
        return
    new_message = None
    if update.edited_message and update.edited_message.text:
        new_message = update.edited_message
    elif update.message and update.message.text:
        new_message = update.message

    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –≤—ã—Ö–æ–¥–∏–º
    if not new_message:
        return

    # –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π new_message
    text = new_message.text.strip()
    message_sent = new_message.date.astimezone(pytz.timezone("Europe/Kiev"))
    chat = new_message.chat
    group_id = chat.id
    topic_id = new_message.message_thread_id if new_message.message_thread_id is not None else group_id
    if chat.title:
        state.group_titles[group_id] = chat.title
    if new_message.forum_topic_created:
        state.topic_names[(group_id, topic_id)] = new_message.forum_topic_created.name
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–º—è —Ç–µ–º—ã: {new_message.forum_topic_created.name} –¥–ª—è topic_id {topic_id}")

    logger.info(
        f"–ü–æ–ª—É—á–µ–Ω–æ {'–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ' if update.edited_message else '–Ω–æ–≤–æ–µ'} —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ {group_id} ({chat.title or group_id}): {text}")

    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã '-', '+', '(', ')', –∏ –ø—Ä–æ–±–µ–ª—ã
    phone_candidate = re.sub(r'[-+() ]', '', text)

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –±–æ–ª—å—à–µ 8
    if phone_candidate.isdigit() and len(phone_candidate) > 8:
        state.last_phone[(group_id, topic_id)] = phone_candidate
        logger.info(f"–ó–∞–ø–æ–º–Ω–µ–Ω –Ω–æ–º–µ—Ä {phone_candidate} –¥–ª—è —Ç–µ–º—ã {topic_id} –≥—Ä—É–ø–ø—ã {group_id}.")
        return

    extraction = await asyncio.to_thread(extract_event_info, text, topic_id, message_sent)
    logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {extraction}")

    # –ï—Å–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if extraction.get("phone") is None and not extraction.get("started", False) and not extraction.get("stopped",
                                                                                                       False):
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
        return
    # –ï—Å–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ
    if not extraction.get("phone") is None and not extraction.get("started", False) and not extraction.get(
            "stopped", False):
        phone_extracted = extraction.get("phone")
        state.last_phone[(group_id, topic_id)] = phone_extracted
        logger.info(f"–ó–∞–ø–æ–º–Ω–µ–Ω –Ω–æ–º–µ—Ä {phone_extracted} –¥–ª—è —Ç–µ–º—ã {topic_id} –≥—Ä—É–ø–ø—ã {group_id}.")
        return

    phone_extracted = extraction.get("phone")
    started_flag = extraction.get("started", False)
    stopped_flag = extraction.get("stopped", False)
    started_time_str = extraction.get("started_time")
    stopped_time_str = extraction.get("stopped_time")
    extracted_topic_id = extraction.get("topic_id")

    if phone_extracted:
        state.last_phone[(group_id, extracted_topic_id)] = phone_extracted

    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø–æ–º–Ω–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —Ç–µ–º—ã
    if not phone_extracted and (started_flag or stopped_flag):
        if (group_id, extracted_topic_id) in state.last_phone:
            phone_extracted = state.last_phone[(group_id, extracted_topic_id)]
        else:
            logger.info(f"–ù–µ—Ç –Ω–æ–º–µ—Ä–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –≤ —Ç–µ–º–µ {extracted_topic_id} –≥—Ä—É–ø–ø—ã {group_id}.")
            return

    key = (group_id, extracted_topic_id, phone_extracted)


    record = state.stats.get(key, {})
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è "–≤—Å—Ç–∞–ª"
    if started_flag:
        record["started"] = started_time_str
        record["stopped"] = None
        record["downtime"] = None

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è "—Å–ª–µ—Ç–µ–ª"
    if stopped_flag:
        if record.get("started"):
            record["stopped"] = stopped_time_str
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 'started' –∏ 'stopped' –≤ datetime –ø–µ—Ä–µ–¥ –≤—ã—á–∏—Ç–∞–Ω–∏–µ–º
            started_time = convert_to_datetime(record.get("started"))
            stopped_time = convert_to_datetime(record.get("stopped"))

            # –ï—Å–ª–∏ –æ–±–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∞–ª–∏ datetime, –≤—ã—á–∏—Å–ª—è–µ–º downtime
            if started_time and stopped_time:
                record["downtime"] = stopped_time - started_time
            else:
                record["downtime"] = None  # –ï—Å–ª–∏ –æ–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ datetime

        else:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ —Å —Å–æ–±—ã—Ç–∏–µ–º "–≤—Å—Ç–∞–ª" –Ω–µ—Ç, –∏—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∑–∞–ø–∏—Å—å –ø–æ —Ç–µ–º–µ
            candidate_key = None
            candidate_record = None
            for (g, tid, ph), rec in state.stats.items():
                if g == group_id and tid == extracted_topic_id and rec.get("started") and rec.get("stopped") is None:
                    if candidate_record is None or rec["started"] > candidate_record["started"]:
                        candidate_key = (g, tid, ph)
                        candidate_record = rec
            if candidate_record is None:
                logger.info("–ù–µ—Ç –∑–∞–ø–∏—Å–∏ '–≤—Å—Ç–∞–ª' –¥–ª—è —Å–æ–±—ã—Ç–∏—è '—Å–ª–µ—Ç–µ–ª'")
                return
            key = candidate_key
            record = candidate_record
            record["stopped"] = stopped_time_str
            record["downtime"] = record["stopped"] - record["started"]

    state.stats[key] = record
    group_title = chat.title if chat.title else str(group_id)
    await update_global_message(group_id, group_title, context)
    state.save_to_csv()


async def send_grouped_stats(context: CallbackContext):
    logger.info(f"Grouped stats")
    if not state.admin_chat_id:
        return
    groups = {}
    for (group_id, topic_id, phone), rec in state.stats.items():
        groups.setdefault(group_id, {}).setdefault(topic_id, []).append((phone, rec))
    for g_id, topics in groups.items():
        group_title = state.group_titles.get(g_id, str(g_id))
        lines = [f"–ì—Ä—É–ø–ø–∞: {group_title}"]
        overall_total_seconds = 0
        overall_count = 0
        for tid in sorted(topics.keys()):
            lines.append(f"\nTopic id: {tid}")
            topic_lines = []
            topic_total_seconds = 0
            topic_count = 0
            for phone, rec in topics[tid]:
                topic_lines.append(format_record(rec, phone))
                if rec.get("downtime"):
                    topic_total_seconds += rec["downtime"].total_seconds()
                    topic_count += 1
            topic_lines.sort()
            lines.extend(topic_lines)
            if topic_count:
                avg_seconds = topic_total_seconds / topic_count
                avg_hours = int(avg_seconds // 3600)
                avg_minutes = int((avg_seconds % 3600) // 60)
                # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
                total_avg_minutes = avg_hours * 60 + avg_minutes
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                marker = ""
                if total_avg_minutes < 20:
                    marker = " üî¥"
                elif total_avg_minutes < 30:
                    marker = " üü†"
                lines.append(f"–°—Ä–µ–¥–Ω–µ–µ –ø–æ –ø–∫ - {avg_hours}:{avg_minutes:02d}{marker}")
            else:
                lines.append("–°—Ä–µ–¥–Ω–µ–µ –ø–æ –ø–∫ - 0:00")
        if overall_count:
            overall_avg = overall_total_seconds / overall_count
            overall_hours = int(overall_avg // 3600)
            overall_minutes = int((overall_avg % 3600) // 60)
            # lines.append(f"\n–°—Ä–µ–¥–Ω–µ–µ –ø–æ –≥—Ä—É–ø–ø–µ - {overall_hours}:{overall_minutes:02d}")
        # else:
        #   lines.append("\n–°—Ä–µ–¥–Ω–µ–µ –ø–æ –≥—Ä—É–ø–ø–µ - 0:00")
        final_message = "\n".join(lines)
        keyboard = get_daily_stats_keyboard(g_id)  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ get_group_stats_keyboard(g_id)
        try:
            sent_msg = await context.bot.send_message(
                chat_id=state.admin_chat_id,
                text=final_message,
                reply_markup=keyboard
            )
            state.global_message_ids[g_id] = sent_msg.message_id
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {g_id} —Å id {sent_msg.message_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {g_id}: {e}")


AUTHORIZED_USERS = [6546400704]  # –ü—Ä–∏–º–µ—Ä —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö user_id


# --------------------------------BUTTON HANDLERS-------------------------------------
async def start_tracking(update: Update, context: CallbackContext):
    # –ï—Å–ª–∏ —ç—Ç–æ callback_query (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏), –∏—Å–ø–æ–ª—å–∑—É–µ–º query
    if update.callback_query:
        user_id = update.callback_query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback_query
    elif update.message:
        user_id = update.message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ message
    else:
        return  # –ï—Å–ª–∏ update –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏ message, –Ω–∏ callback_query, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if user_id not in AUTHORIZED_USERS:
        await update.callback_query.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.") if update.callback_query else await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    state.tracking_active = True

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º update.message, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ callback_query, –∞ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message:
        state.admin_chat_id = update.message.chat_id
    elif update.callback_query and update.callback_query.message:
        state.admin_chat_id = update.callback_query.message.chat_id
    else:
        logger.error("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å chat_id.")
        return

    state.stats.clear()
    state.global_message_ids.clear()
    state.load_from_csv()  # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ CSV —Ñ–∞–π–ª–∞

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –∏–º–µ—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö –≤ –≤–∏–¥–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ —Ç–µ–º–∞–º
    await send_grouped_stats(context)

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–°—Ç–æ–ø"
    await update.message.reply_text(
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞",
        reply_markup=get_stop_keyboard()  # –ö–Ω–æ–ø–∫–∞ "–°—Ç–æ–ø"
    ) if update.message else await update.callback_query.message.reply_text(
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞",
        reply_markup=get_stop_keyboard()  # –ö–Ω–æ–ø–∫–∞ "–°—Ç–æ–ø"
    )


from datetime import datetime

def convert_to_datetime(value):
    if isinstance(value, str):
        try:
            time_part = datetime.strptime(value, "%H:%M").time()
            now = datetime.now(pytz.timezone("Europe/Kiev"))   # –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω—É–∂–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: datetime.now(pytz.timezone("Europe/Kiev"))
            return datetime.combine(now.date(), time_part)
        except ValueError:
            return None
    elif isinstance(value, datetime):
        return value
    return None



async def stop_tracking(update: Update, context: CallbackContext):
    state.tracking_active = False
    query = update.callback_query
    if query:
        try:
            await query.edit_message_text(
                text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
                reply_markup=get_start_keyboard()
            )
            logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    else:
        await update.message.reply_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", reply_markup=get_start_keyboard())


async def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data == "start_tracking":
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç"
        await start_tracking(update, context)  # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    elif query.data == "stop_tracking":
        await stop_tracking(update, context)  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    elif query.data.startswith("group_stats_"):
        group_id = int(query.data.split('_')[2])
        group_title = state.group_titles.get(group_id, str(group_id))
        await update_global_message(group_id, group_title, context, view_mode="grouped")
    elif query.data.startswith("daily_stats_"):
        group_id = int(query.data.split('_')[2])
        group_title = state.group_titles.get(group_id, str(group_id))
        await update_global_message(group_id, group_title, context, view_mode="daily")


def get_stop_keyboard():
    keyboard = [
        [InlineKeyboardButton("–°—Ç–æ–ø", callback_data="stop_tracking")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_group_stats_keyboard(group_id):
    keyboard = [
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∫", callback_data=f"group_stats_{group_id}")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_daily_stats_keyboard(group_id):
    keyboard = [
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ", callback_data=f"daily_stats_{group_id}")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_start_keyboard():
    logger.info(f"start keyboard")
    keyboard = [
        [InlineKeyboardButton("–°—Ç–∞—Ä—Ç", callback_data="start_tracking")]
    ]
    return InlineKeyboardMarkup(keyboard)

def format_record(record: dict, phone: str) -> str:
    started = record.get("started")
    stopped = record.get("stopped")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
    started = convert_to_datetime(started) if isinstance(started, str) else started
    stopped = convert_to_datetime(stopped) if isinstance(stopped, str) else stopped

    started_str = started.strftime("%H:%M") if started else "-"
    stopped_str = stopped.strftime("%H:%M") if stopped else "-"

    downtime = record.get("downtime")
    if downtime:
        total_minutes = int(downtime.total_seconds() // 60)
        hours, minutes = divmod(total_minutes, 60)
        downtime_str = f"{hours}:{minutes:02d}"
    else:
        downtime_str = "-"

    return f"{phone} | {started_str} | {stopped_str} | {downtime_str}"
